{"version":3,"sources":["structs/NodeTree.ts","redux/reducers/machine.ts","redux/reducers/index.ts","components/Header/index.tsx","components/Gramatica/index.tsx","components/UML/index.tsx","components/Tester/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NodeTree","words","cache","state","alphabet","this","length","word","stateKey","slice","toString","first","rest","currentState","nextState","on","final","validated","getWordProps","letter","findOrCreateNextKey","createMachine","id","initial","states","getState","sort","a","b","initializeState","buildState","forEach","buildWordState","toLowerCase","nextStateKey","prevState","addLetterToAlphabet","join","type","undefined","includes","concat","INITIAL_STATE","tree","test","isFinal","createActions","addWord","addTest","reset","prefix","Types","Creators","reducer","createReducer","ADD_TEST","bTest","_","last","trim","split","ADD_WORD","uniq","addWords","RESET","combineReducers","machine","Header","title","subTitle","backIcon","onBack","window","location","href","ConnectedGramatica","connect","dispatch","onChange","target","value","props","placeholder","ConnectedUML","get","React","useState","columns","dataIndex","width","align","getAlphabet","map","key","dataSource","size","pagination","bordered","rowClassName","row","e","ConnectedTester","InfinityAutomata","locale","ptBR","Content","justify","span","hot","store","createStore","reducers","applyMiddleware","logger","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"68BAEO,I,EAAMA,EAAb,WAME,aAAe,yBALfC,WAKc,OAJdC,MAAa,GAIC,KAHdC,MAAa,GAGC,KAFdC,SAAqB,GAGnBC,KAAKJ,MAAQ,GACbI,KAAKH,MAAQ,GACbG,KAAKF,MAAQ,GACbE,KAAKD,SAAW,GAVpB,sDAcI,OAA6B,IAAtBC,KAAKJ,MAAMK,SAdtB,mCAiBeC,GAA6C,IAA/BC,EAA8B,uDAAX,KAAW,EACjC,CAACD,EAAKE,MAAM,EAAG,GAAIF,EAAKE,MAAM,GAAGC,YAAhDC,EADgD,KACzCC,EADyC,KAEjDC,EAAeR,KAAKF,MAAMK,GAEhC,GAAIK,EAAc,CAChB,IAAMC,EAAYD,EAAaE,GAAGJ,GAElC,GAAIG,EACF,MAAkB,WAAdA,EACW,KAATF,EACK,CAAEI,OAAO,EAAMC,WAAW,EAAMd,MAAOK,GAGzC,CAAEQ,OAAO,EAAOC,WAAW,EAAOd,MAAOK,GAGrC,KAATI,EACEC,EAAaG,MACR,CAAEA,OAAO,EAAMC,WAAW,EAAMd,MAAOK,GAEvC,CAAEQ,OAAO,EAAOC,WAAW,EAAMd,MAAOK,GAG1CH,KAAKa,aAAaN,EAAME,GAKrC,MAAO,CAAEE,OAAO,EAAOC,WAAW,EAAOd,MAAOK,KA7CpD,0CAgDsBW,EAAgBN,EAAsBG,GACxD,OAAIA,GACM,EAGLX,KAAKH,MAAMW,GAILR,KAAKH,MAAMW,IAAiBR,KAAKH,MAAMW,GAAcM,SAAWA,EAClEd,KAAKH,MAAMW,GAAcC,UAEzBT,KAAKe,oBAAoBD,EAAQN,EAAe,EAAGG,IAN1DX,KAAKH,MAAMW,GAAgB,CAAEM,SAAQL,UAAWD,EAAe,GAExDR,KAAKH,MAAMW,GAAcC,aAxDtC,mCAiEI,OAAOO,YAAc,CACnBC,GAAI,OACJC,QAAS,KACTC,OAAQnB,KAAKoB,eApEnB,iCAwEgC,IAAD,uBAAjBxB,EAAiB,yBAAjBA,EAAiB,gBAC3BI,KAAKJ,MAAQA,EAAMyB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEtB,OAASqB,EAAErB,UAE/CD,KAAKwB,kBACLxB,KAAKyB,eA5ET,wCAgFIzB,KAAKF,MAAQ,GACbE,KAAKH,MAAQ,KAjFjB,mCAoFgB,IAAD,OACXG,KAAKJ,MAAM8B,SAAQ,SAAAxB,GAAI,OAAI,EAAKyB,eAAe,EAAGzB,EAAKG,WAAWuB,oBArFtE,qCAwFiB9B,EAAeI,GAAe,IAAD,EACpB,CAACA,EAAKE,MAAM,EAAG,GAAIF,EAAKE,MAAM,IAA7CE,EADmC,KAC5BC,EAD4B,KAEpCI,EAA4B,KAApBJ,EAAKF,WACbI,EAAYT,KAAKe,oBAAoBT,EAAOR,EAAOa,GACnDkB,EAAY,WAAOpB,GACnBqB,EAAY9B,KAAKF,MAAL,WAAeA,KAAY,CAAEY,GAAI,IAEnDV,KAAK+B,oBAAoBzB,GAEzBN,KAAKF,MAAL,WAAeA,IAAf,KACKgC,EADL,CAEEpB,GAAG,EAAD,GACGoB,EAAUpB,GADb,eAECJ,EAAQwB,EAAUpB,GAAGJ,GAClBK,EACE,CAACmB,EAAUpB,GAAGJ,GAAQ,UAAK0B,KAAK,OAChCH,EACFlB,EACA,SACAkB,IAENI,KAAMtB,EAAQ,aAAUuB,IAGrBvB,GACHX,KAAK2B,eAAelB,EAAWF,KAjHrC,iCAsHI,OAAO,EAAP,GAAYP,KAAKF,SAtHrB,iCA0HI,OAAOE,KAAKH,QA1HhB,0CA6HsBiB,GACbd,KAAKD,SAASoC,SAASrB,KAC1Bd,KAAKD,SAAWC,KAAKD,SAASqC,OAAOtB,MA/H3C,oCAoII,OAAOd,KAAKD,SAASsB,WApIzB,K,yjBCEO,IAAMgB,EAAgB,CAC3BC,KAAM,IAAI3C,EACV4C,KAAM,KACNC,SAAS,G,EAGwBC,wBACjC,CACEC,QAAS,CAAC,QACVC,QAAS,CAAC,QACVC,MAAO,KACPzB,OAAQ,IAEV,CAAE0B,OAAQ,cAPGC,E,EAAAA,MAAOC,E,EAAAA,SAUTC,EAAUC,wBAAcZ,GAAD,mBACjCS,EAAMI,UAAW,SAACpD,EAAD,GAAkC,IAAbqD,EAAY,EAAlBZ,KAS/B,OAAO,KACFzC,EADL,CAEE0C,QAV0C,MAA5BW,EAAMA,EAAMlD,OAAS,GAWnCsC,KAVWa,IAAEC,KACbF,EACG9C,WACAiD,OACAC,MAAM,aAPqB,cAiBjCT,EAAMU,UAAW,SAAC1D,EAAD,GAA2B,IAAZI,EAAW,EAAXA,KACzBN,EAAQwD,IAAEK,KACdvD,EACGG,WACAiD,OACAC,MAAM,QAELjB,EAAO,IAAI3C,EAIjB,OAFA2C,EAAKoB,SAAL,MAAApB,EAAI,YAAa1C,IAEV,KACFE,EADL,CAEEwC,YA9B8B,cAiCjCQ,EAAMa,OAAQ,kBAAMtB,KAjCa,ICjBrBuB,cAAgB,CAC7BC,Y,gBCDWC,EAAS,kBACpB,kBAAC,IAAD,CACEC,MAAM,uBACNC,SAAS,SACTC,SAAU,kBAAC,IAAD,CAAMhC,KAAK,WACrBiC,OAAQ,kBAAOC,OAAOC,SAASC,KAAO,gE,oCCD7BC,EAAqBC,YAChC,MACA,SAAAC,GAAQ,MAAK,CACXC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAqBF,EAASzB,EAASL,QAAQgC,EAAOC,YAHlCJ,EAFT,SAACK,GAAD,OAAuB,kBAAC,IAAD,eAAOC,YAAY,mCAAmCD,O,uOCA/F,IAsDME,EAAeP,aAAQ,SAAAzE,GAAK,MAAK,CAC5CwC,KAAMc,IAAE2B,IAAIjF,EAAO,gBACnByC,KAAMa,IAAE2B,IAAIjF,EAAO,gBACnB0C,QAASY,IAAE2B,IAAIjF,EAAO,sBAHIyE,EAtDT,SAAC,GAAkC,IAAhCjC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAAmB,EAC3BwC,IAAMC,SAAS,GADY,mBAE7CC,GAF6C,UAEtC,CACX,CAAEnB,MAAO,IAAKoB,UAAW,WAAYC,MAAO,GAAIC,MAAO,WAD5C,mBAER/C,EAAKgD,cAAcC,KAAI,SAACzE,GAAD,MAAqB,CAC7CiD,MAAOjD,EACPqE,UAAWrE,EACX0E,IAAK1E,EACLsE,MAAO,GACPC,MAAO,gBAGLI,EAAarC,IAAEmC,IAAIjD,EAAKlB,YAAY,WAAoBjB,GAApB,IAAGO,EAAH,EAAGA,GAAIuB,EAAP,EAAOA,KAAP,O,yVAAA,EACxCuD,IAAKrF,EACLA,SAAS,GAAD,OAAKA,GAAL,OAAgB8B,GAAiB,UAATA,EAAmB,IAAM,KACtDvB,MAGL,OACE,kBAAC,IAAD,CACEgF,KAAK,SACLC,YAAY,EACZC,UAAQ,EACRV,QAASA,EACTO,WAAYA,EACZI,aAAc,SAAAC,GACZ,IAAKvD,GAAwB,IAAhBA,EAAKtC,OAChB,MAAO,GAGT,IAAK,IAAD,EACkCqC,EAAKzB,aAAa0B,GAA9C5B,EADN,EACMA,MAAOC,EADb,EACaA,UAAWd,EADxB,EACwBA,MAE1B,OAAIgG,EAAIN,MAAQ1F,EACP,GAGLc,EACED,GAAS6B,EACJ,WAEA,cAIJ,UACP,MAAOuD,GACP,MAAO,iBC7CJC,EAAkBzB,YAC7B,MACA,SAAAC,GAAQ,MAAK,CACXC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAqBF,EAASzB,EAASJ,QAAQ+B,EAAOC,YAHrCJ,EAFT,SAACK,GAAD,OAAuB,kBAAC,IAAD,eAAOC,YAAY,kCAAkCD,OCgC5FqB,EAAmB1B,aACvB,SAAAzE,GAAK,MAAK,CACRwC,KAAMc,IAAE2B,IAAIjF,EAAO,mBAErBiD,EAJuBwB,EAzBR,WACf,OACE,kBAAC,IAAD,CAAgB2B,OAAQC,KACtB,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAOC,QAAR,KACE,kBAAC,IAAD,CAAKnE,KAAK,OAAOoD,MAAM,SAASgB,QAAQ,UACtC,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAChC,EAAD,OAEF,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKgC,KAAM,IACT,kBAACN,EAAD,OAEF,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKM,KAAM,IACT,kBAACxB,EAAD,cAwBCyB,iBARH,WACV,OACE,kBAAC,IAAD,CAAUC,MAAOC,YAAYC,EAAUC,YAAgBC,OACrD,kBAACX,EAAD,UCnCcY,QACW,cAA7B1C,OAAOC,SAAS0C,UAEe,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MACvB,2D,cCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.26a17d8b.chunk.js","sourcesContent":["import { createMachine } from '@xstate/fsm'\n\nexport class NodeTree {\n  words: string[]\n  cache: any = {}\n  state: any = {}\n  alphabet: string[] = []\n\n  constructor() {\n    this.words = []\n    this.cache = {}\n    this.state = {}\n    this.alphabet = []\n  }\n\n  isEmpty() {\n    return this.words.length === 0\n  }\n\n  getWordProps(word: string, stateKey: string = 'q0'): any {\n    const [first, rest] = [word.slice(0, 1), word.slice(1).toString()]\n    const currentState = this.state[stateKey]\n\n    if (currentState) {\n      const nextState = currentState.on[first]\n\n      if (nextState) {\n        if (nextState === 'ε') {\n          if (rest === '') {\n            return { final: true, validated: true, state: stateKey }\n          }\n\n          return { final: false, validated: false, state: stateKey }\n        }\n\n        if (rest === '') {\n          if (currentState.final) {\n            return { final: true, validated: true, state: stateKey }\n          } else {\n            return { final: false, validated: true, state: stateKey }\n          }\n        } else {\n          return this.getWordProps(rest, nextState)\n        }\n      }\n    }\n\n    return { final: false, validated: false, state: stateKey }\n  }\n\n  findOrCreateNextKey(letter: string, currentState: number, final: boolean): number {\n    if (final) {\n      return -1\n    }\n\n    if (!this.cache[currentState]) {\n      this.cache[currentState] = { letter, nextState: currentState + 1 }\n\n      return this.cache[currentState].nextState\n    } else if (this.cache[currentState] && this.cache[currentState].letter === letter) {\n      return this.cache[currentState].nextState\n    } else {\n      return this.findOrCreateNextKey(letter, currentState + 1, final)\n    }\n  }\n\n  getMachine() {\n    return createMachine({\n      id: 'main',\n      initial: 'q0',\n      states: this.getState(),\n    })\n  }\n\n  addWords(...words: string[]) {\n    this.words = words.sort((a, b) => b.length - a.length)\n\n    this.initializeState()\n    this.buildState()\n  }\n\n  initializeState() {\n    this.state = {}\n    this.cache = {}\n  }\n\n  buildState() {\n    this.words.forEach(word => this.buildWordState(0, word.toString().toLowerCase()))\n  }\n\n  buildWordState(state: number, word: string) {\n    const [first, rest] = [word.slice(0, 1), word.slice(1)]\n    const final = rest.toString() === ''\n    const nextState = this.findOrCreateNextKey(first, state, final)\n    const nextStateKey = `q${nextState}`\n    const prevState = this.state[`q${state}`] || { on: {} }\n\n    this.addLetterToAlphabet(first)\n\n    this.state[`q${state}`] = {\n      ...prevState,\n      on: {\n        ...prevState.on,\n        [first]: prevState.on[first]\n          ? final\n            ? [prevState.on[first], 'ε'].join(' | ')\n            : nextStateKey\n          : final\n          ? 'ε'\n          : nextStateKey,\n      },\n      type: final ? 'final' : undefined,\n    }\n\n    if (!final) {\n      this.buildWordState(nextState, rest)\n    }\n  }\n\n  getState() {\n    return { ...this.state }\n  }\n\n  getCache() {\n    return this.cache\n  }\n\n  addLetterToAlphabet(letter: string) {\n    if (!this.alphabet.includes(letter)) {\n      this.alphabet = this.alphabet.concat(letter)\n    }\n  }\n\n  getAlphabet() {\n    return this.alphabet.sort()\n  }\n}\n","import { createReducer, createActions } from 'reduxsauce'\nimport _ from 'lodash'\nimport { NodeTree } from '../../structs/NodeTree'\n\nexport const INITIAL_STATE = {\n  tree: new NodeTree(),\n  test: null,\n  isFinal: false,\n}\n\nexport const { Types, Creators } = createActions(\n  {\n    addWord: ['word'],\n    addTest: ['test'],\n    reset: null,\n    states: [],\n  },\n  { prefix: '@machine/' }\n)\n\nexport const reducer = createReducer(INITIAL_STATE, {\n  [Types.ADD_TEST]: (state: any, { test: bTest }) => {\n    const isFinal = bTest[bTest.length - 1] === ' '\n    const test = _.last(\n      bTest\n        .toString()\n        .trim()\n        .split(/\\W+/)\n    )\n\n    return {\n      ...state,\n      isFinal,\n      test,\n    }\n  },\n\n  [Types.ADD_WORD]: (state: any, { word }) => {\n    const words = _.uniq<string>(\n      word\n        .toString()\n        .trim()\n        .split(/\\W+/)\n    )\n    const tree = new NodeTree()\n\n    tree.addWords(...words)\n\n    return {\n      ...state,\n      tree,\n    }\n  },\n  [Types.RESET]: () => INITIAL_STATE,\n})\n","import { combineReducers } from 'redux'\nimport { reducer as machine } from './machine'\n\nexport default combineReducers({\n  machine,\n})\n","import React from 'react'\nimport { PageHeader, Icon } from 'antd'\n\nexport const Header = () => (\n  <PageHeader\n    title=\"Analisador Léxico\"\n    subTitle=\"v2.0.0\"\n    backIcon={<Icon type=\"github\" />}\n    onBack={() => (window.location.href = 'https://github.com/leonardofalk/finite-automata-react-lab')}\n  />\n)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Creators } from '../../redux/reducers/machine'\nimport Input, { InputProps } from 'antd/lib/input'\n\nexport const Gramatica = (props: InputProps) => <Input placeholder=\"Insira palavras da gramática\" {...props} />\n\nexport const ConnectedGramatica = connect(\n  null,\n  dispatch => ({\n    onChange: ({ target }: any) => dispatch(Creators.addWord(target.value)),\n  })\n)(Gramatica)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Table } from 'antd'\nimport _ from 'lodash'\n\nexport const UML = ({ tree, test, isFinal }: any) => {\n  const [idx, setIndex] = React.useState(0)\n  const columns = [\n    { title: ' ', dataIndex: 'stateKey', width: 32, align: 'center' },\n    ...tree.getAlphabet().map((letter: string) => ({\n      title: letter,\n      dataIndex: letter,\n      key: letter,\n      width: 32,\n      align: 'center',\n    })),\n  ]\n  const dataSource = _.map(tree.getState(), ({ on, type }: any, stateKey) => ({\n    key: stateKey,\n    stateKey: `${stateKey}${type && type === 'final' ? '*' : ''}`,\n    ...on,\n  }))\n\n  return (\n    <Table\n      size=\"middle\"\n      pagination={false}\n      bordered\n      columns={columns}\n      dataSource={dataSource}\n      rowClassName={row => {\n        if (!test || test.length === 0) {\n          return ''\n        }\n\n        try {\n          const { final, validated, state } = tree.getWordProps(test)\n\n          if (row.key !== state) {\n            return ''\n          }\n\n          if (validated) {\n            if (final && isFinal) {\n              return 'good-row'\n            } else {\n              return 'current-row'\n            }\n          }\n\n          return 'bad-row'\n        } catch (e) {\n          return 'bad-row'\n        }\n      }}\n    />\n  )\n}\n\nexport const ConnectedUML = connect(state => ({\n  tree: _.get(state, 'machine.tree'),\n  test: _.get(state, 'machine.test'),\n  isFinal: _.get(state, 'machine.isFinal'),\n}))(UML)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Creators } from '../../redux/reducers/machine'\nimport Input, { InputProps } from 'antd/lib/input'\n\nexport const Tester = (props: InputProps) => <Input placeholder=\"Teste palavras da gramática\" {...props} />\n\nexport const ConnectedTester = connect(\n  null,\n  dispatch => ({\n    onChange: ({ target }: any) => dispatch(Creators.addTest(target.value)),\n  })\n)(Tester)\n","import React from 'react'\nimport { hot } from 'react-hot-loader/root'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider, connect } from 'react-redux'\nimport { Layout, Row, Col, Divider, ConfigProvider } from 'antd'\nimport ptBR from 'antd/lib/locale/pt_BR'\nimport logger from 'redux-logger'\nimport _ from 'lodash'\nimport reducers from './redux/reducers'\nimport { Creators } from './redux/reducers/machine'\nimport { Header, ConnectedUML, ConnectedGramatica, ConnectedTester } from './components'\n\nconst Automata = () => {\n  return (\n    <ConfigProvider locale={ptBR}>\n      <Layout>\n        <Header />\n        <Layout.Content>\n          <Row type=\"flex\" align=\"middle\" justify=\"center\">\n            <Col span={20}>\n              <ConnectedGramatica />\n            </Col>\n            <Divider />\n            <Col span={20}>\n              <ConnectedTester />\n            </Col>\n            <Divider />\n            <Col span={20}>\n              <ConnectedUML />\n            </Col>\n          </Row>\n        </Layout.Content>\n      </Layout>\n    </ConfigProvider>\n  )\n}\n\nconst InfinityAutomata = connect(\n  state => ({\n    tree: _.get(state, 'machine.tree'),\n  }),\n  Creators\n)(Automata)\n\nconst App = () => {\n  return (\n    <Provider store={createStore(reducers, applyMiddleware(logger))}>\n      <InfinityAutomata />\n    </Provider>\n  )\n}\n\nexport default hot(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'\nimport './app.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}